/**
 * Stories for <%- pascalName %>.
 *
 * @see https://storybook.js.org/docs/vue/essentials/controls
 */

import generateArgTypes from '@netsells/storybook-vue-generate-arg-types';
import <%- pascalName %> from './<%- pascalName %>.vue';
import { argsKeys } from '<%- toRoot %>.storybook/helpers';
import { useStorybookArgs } from '<%- toRoot %>composables/useStorybookArgs';

export default {
    /**
     * Set the component on the default export for props to be
     * automatically converted to args/controls.
     */
    component: <%- pascalName %>,
    /**
     * Provide custom control types for your props.
     *
     * @see https://storybook.js.org/docs/vue/essentials/controls#annotation
     */
    argTypes: generateArgTypes(<%- pascalName %>),
    /**
     * Set any default props data on your component.
     *
     * @see https://storybook.js.org/docs/7.0/vue/writing-stories/args
     */
    args: {},
    /**
     * Set any default parameters on your stories.
     *
     * @see https://storybook.js.org/docs/7.0/vue/writing-stories/parameters
     */
    parameters: {
        container: true,
        layout: 'centered',
    },
    /**
     * Return your rendered component.
     *
     * @see https://storybook.js.org/docs/7.0/vue/api/csf
     */
    render: (args, { argTypes }) => ({
        name: '<%- kebabName %>-story',

        props: argsKeys({ ...args, ...argTypes }),

        components: { <%- pascalName %> },

        setup(props) {
            const { propArgs } = useStorybookArgs({ props, args });

            return {
                propArgs,
            };
        },

        template: `
            <<%- kebabName %>
                v-bind="propArgs"
            />
        `,
    }),
};

export const <%- camelName %> = {};
<% if (props.length) { %>
<%- camelName %>.args = {
    <%= props.map(({ name, argValue }) => `${ name }: ${ argValue },`).join('\n    ') %>
};
<% } %>
